bringToFront = F),
labelOptions = labelOptions(noHide      = F,
opacity     = 0.9,
direction   = 'left',
offset      = c(-10,0),
textOnly    = F,
style       = list(
"padding" = "3px 8px",
"font-family" = "Arial Narrow"
))) %>%
# Ajoutez les lignes des provinces
addPolylines(data        = admin2_lines,
color       = reach_grey,
weight      = 0.2,
opacity     = 1.0,
options     = list(zIndex = 300))%>%
# Ajoutez les lignes des regions
addPolylines(data        = admin1_lines,
color       = white,
weight      = 1.3,
opacity     = 1.0,
options     = list(zIndex = 400))%>%
# add region labellinga
addLabelOnlyMarkers(data         = admin1_labels,
label        = admin1_labels_halo,
labelOptions = labelOptions(noHide    = T,
direction = 'center',
textOnly  = T,
style     = list(
"padding"     = "3px 8px",
"font-family" = "Arial",
"text-shadow" = sprintf("-1px 0 %s, 0 1px %s, 1px 0 %s, 0 -1px %s, 0 0 7px %s", white, white, white, white, white)
)))  %>%
# set view coordinates
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4]) %>%
# add gradient legend
leaflet::addLegend(position  = "bottomright",
pal       = reach_pal,
values    = select_value_admin2,
na.label  = "Not assessed",
labFormat = labelFormat(
prefix  = "    "),
title     =
# ifelse(select_ind_type == "pc", "%:", "Nombre:"),
paste(strwrap(select_indicator,30), collapse="<br>"),
opacity = 1) %>%
# add scale
addScaleBar(position = "bottomleft", scaleBarOptions(imperial = FALSE))
})
######################################
# render info box for indicator select
output$infobox <- renderUI({
# get population group
select_popgroup <- as.character(input$popgroup)
# remove special characters from the IDP categories
popgroup        <- case_when(select_popgroup == "PDI" ~ "PDI",
select_popgroup == "Communauté hôte" ~ "Communauté hôte",
TRUE ~ "")
# obtenir secteur et indicateur
select_sector_input <- input$sector
select_indicator    <- input$indicator
indicator_info <- indicator_lookup%>%
filter(groupe_de_population == popgroup & indicateur == select_indicator & question_de_recherche == select_sector_input)
select_color <- case_when(input$color == "reach_red" ~ reach_red,
input$color == "reach_green" ~ reach_drk_green,
input$color == "reach_grey" ~ reach_grey)
HTML(sprintf("<img class='icon' src='%s.svg' style='color: %s; display:inline-block'>
<h2 style='color: %s; display:inline-block'><strong>    %s</strong></h2>
<h3 style='color: %s'><strong> %s</strong></h3>
<hr>
<h4>%s</h4>
<p><strong>%s</strong></p>",
indicator_info$icon,
select_color,
select_color,
select_sector_input,
reach_grey,
popgroup,
indicator_info$indicateur,
indicator_info$sous_ensemble_de_donnee))
})
# observez les changes des selections
observe({
select_popgroup <- as.character(input$popgroup)
select_sector <- as.character(input$sector)
# filter indicator for selected pop group
selected_ind_group <- indicator_lookup%>%
filter(case_when(select_popgroup == "PDI" ~ groupe_de_population == "PDI",
select_popgroup == "Communauté hôte" ~ groupe_de_population == "Communauté hôte"))
# filter indicator for selected sector
selected_ind_group <- selected_ind_group %>%
filter(question_de_recherche == select_sector)
updateSelectInput(session, "indicator",
choices = unique(as.character(selected_ind_group$indicateur)))
})
# event pour imprimer l'ecran
observeEvent(input$print, {
screenshot(id= "map")
})
output$downloadData <- downloadHandler(
filename = function() {
paste("data-", select_popgroup, ".csv", sep="")
},
content = function(file) {
write.csv(admin2_data_filtered, file)
}
)
}
#############################################################################################################################
### LANCEZ LA APP ###
# runApp(shinyApp(ui, server),launch.browser = TRUE)
shinyApp(ui, server)
###### pour faire un deploy a shinyapps.io installer le package "rsconnect"
###### et passez cette fonction dans le console------ rsconnect::deployApp()
#################################################################################################################################################
###############################################################################################
############################# Burkina Faso MSNA Dashboard - RShiny ############################
###############################################################################################
############################# import packages #################################################
# spatial analysis tools
library(sf)                     # vector data tools
library(leaflet)                # plot interactive maps
library(rmapshaper)             # tools for simplifying polygons
# additional packages
library(dplyr)                  # data manipulation
library(purrr)
library(shiny)                  # App building tools
library(shinydashboard)         # calculate zonal statistics
library(shinyjs)                # javascript plugin for Shiny
library(shinyscreenshot)
library(readxl)                 # import excel files
library(htmltools)              # html scripting for R
library(expss)                  # vlookup for R
library(htmlwidgets)
library(janitor)
library(stringr)
source("color_vars.R")
source("functions.R")
#### identifier les regions ou les donnees sont au niveau de admin 1
niveau_admin1 <- c(
"boucle_du_mouhoun", "est", "nord",  "hauts_bassins", "cascades", "plateau_central", "centre_ouest", "centre_sud", "sud_ouest", "centre", "centre_est")
################################################################################################################
##### ADMIN 2 donnees
# lisez les donnees de PDI
msna_admin2_data_pdi <- read_excel("table_data/reach_msna_tableaux_resultats_sectoriels_admin_2_grp_aout_2020.xlsx",
sheet= "summary_stats_admin_2_PDI",
skip = 1,
.name_repair = make_clean_names)
# add unique indicator ID
msna_admin2_data_pdi$indicateur_id <- paste0(msna_admin2_data_pdi$groupe_de_population, "_", as.character(row.names(msna_admin2_data_pdi)))
# prend une vecteur des numeros des indicateurs pour convertir a numerique plus tard
ind_num_vector_admin2_pdi <- msna_admin2_data_pdi$indicateur_id
msna_admin2_data_pdi %<>% relocate(indicateur_id, .after = sous_ensemble_de_donnee)
# indicateurs comme un vecteur pour le lookup table
indicator_lookup_pdi <- msna_admin2_data_pdi %>%
dplyr::select(question_de_recherche:nombre_pc) %>%
arrange(indicateur)
msna_admin2_data_pdi <-  process_tables(msna_admin2_data_pdi, "ADM2_FR", ind_num_vector_admin2_pdi)
# lisez les donnees de CH
msna_admin2_data_ch <- read_excel("table_data/reach_msna_tableaux_resultats_sectoriels_admin_2_grp_aout_2020.xlsx",
sheet= "summary_stats_admin_2_CH",
skip = 1,
.name_repair = make_clean_names)
# add unique indicator ID
msna_admin2_data_ch$indicateur_id <- paste0("CH_", as.character(row.names(msna_admin2_data_ch)))
# prend une vecteur des numeros des indicateurs pour convertir a numerique plus tard
ind_num_vector_admin2_ch <- msna_admin2_data_ch$indicateur_id
msna_admin2_data_ch %<>% relocate(indicateur_id, .after = sous_ensemble_de_donnee)
# indicateurs comme un vecteur pour le lookup table
indicator_lookup_ch <- msna_admin2_data_ch %>%
dplyr::select(question_de_recherche:nombre_pc) %>%
arrange(indicateur)
# merge indicator lookup tables
indicator_lookup <- bind_rows(indicator_lookup_ch, indicator_lookup_pdi)
# joigner avec le tableau lookup des icons
icon_lookup <- read.csv("table_data/icon_lookup.csv")
indicator_lookup <- left_join(indicator_lookup, icon_lookup, by = c("question_de_recherche" = "secteur"))
msna_admin2_data_ch <-  process_tables(msna_admin2_data_ch, "ADM2_FR", ind_num_vector_admin2_ch)
################################################################################################################
##### ADMIN 1 data
# lisez les donnees
# PDI
msna_admin1_data_pdi <- read_excel("table_data/reach_msna_tableaux_resultats_sectoriels_admin_1_grp_aout_2020.xlsx",
sheet= "summary_stats_admin1_PDI",
.name_repair = make_clean_names)
# drop columns added to lookup
msna_admin1_data_pdi %<>% dplyr::select(-c(question_de_recherche, sous_question_de_recherche, groupe_de_population, sous_ensemble_de_donnee))
# add unique indicator ID
msna_admin1_data_pdi <- left_join(indicator_lookup_pdi, msna_admin1_data_pdi, by= 'indicateur')
# prend une vecteur des numeros des indicateurs pour convertir a numerique plus tard
ind_num_vector_admin1_pdi <- msna_admin1_data_pdi$indicateur_id
msna_admin1_data_pdi <-  process_tables(msna_admin1_data_pdi, "ADM1_FR", ind_num_vector_admin1_pdi)
#####################
# lisez les donnees
# CH
msna_admin1_data_ch <- read_excel("table_data/reach_msna_tableaux_resultats_sectoriels_admin_1_grp_aout_2020.xlsx",
sheet= "summary_stats_admin1_CH",
.name_repair = make_clean_names)
# drop columns added to lookup
msna_admin1_data_ch %<>% dplyr::select(-c(question_de_recherche, sous_question_de_recherche, groupe_de_population, sous_ensemble_de_donnee))
# add unique indicator ID
msna_admin1_data_ch <- left_join(indicator_lookup_ch, msna_admin1_data_ch, by= 'indicateur')
# prend une vecteur des numeros des indicateurs pour convertir a numerique plus tard
ind_num_vector_admin1_ch <- msna_admin1_data_pdi$indicateur_id
msna_admin1_data_ch <-  process_tables(msna_admin1_data_ch, "ADM1_FR", ind_num_vector_admin1_ch)
#########################################################################################
################ Read spatial data and convert to SF Objects
# ###################  PROVINCES #############
# lisez le geojson de admin2
admin2_simple <- st_read("spatial_data/admin2_simple.geojson")
# convertir a lignes
admin2_lines    <- st_cast(admin2_simple,"MULTILINESTRING")
admin2_lines    <- st_cast(admin2_lines,"LINESTRING")
# ###################  REGIONS #############
# dissolve a unite admin1
admin1_simple <- rmapshaper::ms_dissolve(admin2_simple, field="ADM1_FR")
# #convertir a lignes
admin1_lines    <- st_cast(admin1_simple,"MULTILINESTRING")
admin1_lines    <- st_cast(admin1_lines,"LINESTRING")
#  creez les centroids pour l'étiquetage des regions
# admin1_labels   <- st_centroid(admin1)
admin1_labels <- st_read("spatial_data/centroid_admin1.geojson")
#### filtrer admin pour afficher les regions ou les donnees sont au niveau admin1
admin1_simple %<>% filter(ADM1_FR %in% niveau_admin1)
############################################################################################
########### join data to admin2 shapefile
# joigner les donnees tableaux a les donnees spatiales
# admin2
admin2_data <- left_join(admin2_simple, msna_admin2_data_ch, by= "ADM2_FR", copy=TRUE) %>%
filter(!is.na(CH_1))
admin2_data <- left_join(admin2_data, msna_admin2_data_pdi, by= "ADM2_FR", copy=TRUE)
# admin1
admin1_data <- left_join(admin1_simple, msna_admin1_data_ch, by= "ADM1_FR", copy=TRUE)
admin1_data <- left_join(admin1_data, msna_admin1_data_pdi, by= "ADM1_FR", copy=TRUE)
admin1_data$ADM1_FR_propre <-  stringr::str_to_title(gsub("_", " ", admin1_data$ADM1_FR))
# filtrer le colonnes qui sont tout NA
admin2_data <-  admin2_data[colSums(!is.na(admin2_data)) > 0]
admin1_data <-  admin1_data[colSums(!is.na(admin1_data)) > 0]
# admin1 format etiquetage
admin1_labels_halo <- sprintf(
'<strong><span style="font-size: 12px; color: %s">%s</span></strong>',
reach_grey, admin1_labels$ADM1_FR) %>%
lapply(htmltools::HTML)
# bounding box
bbox <- st_bbox(admin2_simple) %>%
as.vector()
bbox[1] <- bbox[1] - 0.8
bbox[3] <- bbox[3] + 0.2
bbox[2] <- bbox[2] - 0.2
bbox[4] <- bbox[4] + 0.2
#########################################################################################
################################## UI!!! ################################################
#########################################################################################
ui <- bootstrapPage(title = "2020 Burkina Faso MSNA",
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
tags$head(
HTML(
'<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />'
),
# custom CSS
includeCSS("styles.css")
),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(id = "controls", class = "panel panel-default",
draggable = F, top = 20, right = "auto", left = 20,
width = 250,
h3(strong("2020 Burkina Faso MSNA",
style=paste0('color:', reach_grey))),
radioButtons("popgroup",
h4(strong("Groupe de population:",
style=paste0('color:', reach_grey))),
inline = T,
choices = c( "Communauté hôte", "PDI"),
selected = "Communauté hôte"),
selectInput("sector",
h4(strong("Question de recherche:",
style=paste0('color:', reach_grey))),
selected = "EHA",
choices = sort(unique(as.character(indicator_lookup$question_de_recherche)),
decreasing = FALSE)),
# selectInput("subsector", "Sous question de recherche:",
#             width = 250,
#             selected = "Démographie",
#             choices = sort(unique(as.character(indicator_lookup$sous_question_de_recherche)),
#                            decreasing = FALSE)),
selectInput("indicator",
h4(strong("Indicateur:",
style=sprintf('color:', reach_grey))),
choices = sort(unique(as.character(indicator_lookup$indicateur)),
decreasing = FALSE)),
# selection de couleur
radioButtons("color", h4(strong("Selectionnez couleur:")),
width = 250,
choices = c("Gris" = "reach_grey",
"Rouge" = "reach_red",
"Vert" = "reach_green"),
selected = "reach_red",
inline = T),
# bouton imprimer l'ecran
actionButton("print", "Téléchargez l'image"),
downloadButton("downloadData", "Download")),
absolutePanel(id = "info_box", class = "panel panel-default", fixed = TRUE,
draggable = F, top = 20, left = "auto", right = 20,
width = 250,
p(htmlOutput("infobox")))
)
##################################################################################################
################################## SERVER side ###################################################
##################################################################################################
server <- function(input, output, session) {
# definez le output
output$map <- renderLeaflet({
# put population group input into a variable
select_popgroup <- as.character(input$popgroup)
# format popgroup pour affichage dans le titre de legende
popgroup         <- case_when(select_popgroup == "PDI" ~ "PDI",
select_popgroup == "Communauté hôte" ~ "Communauté hôte")
# filtrez indicateurs pour groupe de population selectionee
selected_ind_group <- indicator_lookup %>%
filter(groupe_de_population == popgroup)
# put dropdown input into a variable
select_indicator <- reactiveValues()
select_indicator <- as.character(input$indicator)
select_ind_num   <- as.character(vlookup_df(select_indicator, selected_ind_group, result_column = 'indicateur_id', lookup_column = 'indicateur'))
select_ind_type  <- as.character(vlookup_df(select_indicator, selected_ind_group, result_column = 'nombre_pc', lookup_column = 'indicateur'))
# filtrez les provinces NA et afficher les donnees regionales au lieu
admin2_data_filtered <- reactiveValues()
admin2_data_filtered <- admin2_data %>%  filter(!is.na(admin2_data[[sprintf("%s", select_ind_num)]]))
# put dynamic variable into a short value name -- very important
select_value_admin2 <- reactiveValues()
select_value_admin1 <- reactiveValues()
select_value_admin2 <- admin2_data_filtered[[sprintf("%s", select_ind_num)]]
select_value_admin1 <- admin1_data[[sprintf("%s", select_ind_num)]]
# definez les palettes de couleurs dans la carte en relacion a la couleur selectionee
select_color_palette <- case_when(input$color == "reach_red" ~ reach_red_palette,
input$color == "reach_green" ~ reach_green_palette,
input$color == "reach_grey" ~ reach_grey_palette)
select_color <- case_when(input$color == "reach_red" ~ reach_red,
input$color == "reach_green" ~ reach_drk_green,
input$color == "reach_grey" ~ reach_grey)
na_color <- case_when(input$color == "reach_red" ~ reach_lt_grey3,
input$color == "reach_green" ~ reach_lt_grey3,
input$color == "reach_grey" ~ reach_lt_pink)
highlight_color <- case_when(input$color == "reach_red" ~ reach_lt_grey,
input$color == "reach_green" ~ reach_lt_grey,
input$color == "reach_grey" ~ reach_red)
# fonction pour generer le palette couleur
reach_pal <- palette_func(select_value_admin1, select_value_admin2, select_color_palette)
# creez l'objet cartorgraphique
bf_map <-leaflet(options=leafletOptions(scrollWheelZoom = FALSE, zoomControl =FALSE, doubleClickZoom = FALSE, zoomSnap = 0.1, zoomDelta = 0.1,
dragging = TRUE, attributionControl = FALSE,
easeLinearity = 0.35, maxZoom = 11, minZoom = 7)) %>%
# ajoutez carte de base de carto DB
addProviderTiles(providers$CartoDB.PositronNoLabels,
options = providerTileOptions(opacity = 0.6)) %>%
# donnees admin1
addPolygons(data         = admin1_data ,
color        = white,
fillColor    = ifelse(is.na(as.numeric(select_value_admin1)),
na_color,
reach_pal(as.numeric(select_value_admin1))),
label        = tooltip_admin1(reach_pal(as.numeric(select_value_admin1)), admin1_data$ADM1_FR_propre, select_value_admin1, select_indicator, select_ind_type),
smoothFactor = 0.5,
opacity      = 0,
fillOpacity  = 1,
options      = list(zIndex = 450),
highlightOptions = highlightOptions(fillColor    = highlight_color,
color        = highlight_color,
weight       = 0,
opacity      = 0,
fillOpacity  = 1,
bringToFront = F),
labelOptions = labelOptions(noHide      = F,
opacity     = 0.9,
direction   = 'left',
offset      = c(-10,0),
textOnly    = F,
style       = list(
# "border" = sprintf("2px solid %s", reach_red),
"padding" = "3px 8px",
"font-family" = "Arial Narrow"
))) %>%
# donnees admin2
addPolygons(data         = admin2_data_filtered,
color        = white,
fillColor    = reach_pal(as.numeric(select_value_admin2)),
label        = tooltip_admin2(select_color, reach_pal(as.numeric(select_value_admin2)), admin2_data_filtered$ADM1_FR_propre, admin2_data_filtered$ADM2_FR_propre, select_value_admin2, select_indicator, select_ind_type),
weight       = 0.2,
smoothFactor = 0.5,
opacity      = 1,
fillOpacity  =1,
options      = list(zIndex = 400),
highlightOptions = highlightOptions(fillColor    = highlight_color,
color        = highlight_color,
weight       = 2,
opacity      = 1,
fillOpacity  = 1,
bringToFront = F),
labelOptions = labelOptions(noHide      = F,
opacity     = 0.9,
direction   = 'left',
offset      = c(-10,0),
textOnly    = F,
style       = list(
"padding" = "3px 8px",
"font-family" = "Arial Narrow"
))) %>%
# Ajoutez les lignes des provinces
addPolylines(data        = admin2_lines,
color       = reach_grey,
weight      = 0.2,
opacity     = 1.0,
options     = list(zIndex = 300))%>%
# Ajoutez les lignes des regions
addPolylines(data        = admin1_lines,
color       = white,
weight      = 1.3,
opacity     = 1.0,
options     = list(zIndex = 400))%>%
# add region labellinga
addLabelOnlyMarkers(data         = admin1_labels,
label        = admin1_labels_halo,
labelOptions = labelOptions(noHide    = T,
direction = 'center',
textOnly  = T,
style     = list(
"padding"     = "3px 8px",
"font-family" = "Arial",
"text-shadow" = sprintf("-1px 0 %s, 0 1px %s, 1px 0 %s, 0 -1px %s, 0 0 7px %s", white, white, white, white, white)
)))  %>%
# set view coordinates
fitBounds(bbox[1], bbox[2], bbox[3], bbox[4]) %>%
# add gradient legend
leaflet::addLegend(position  = "bottomright",
pal       = reach_pal,
values    = select_value_admin2,
na.label  = "Not assessed",
labFormat = labelFormat(
prefix  = "    "),
title     =
# ifelse(select_ind_type == "pc", "%:", "Nombre:"),
paste(strwrap(select_indicator,30), collapse="<br>"),
opacity = 1) %>%
# add scale
addScaleBar(position = "bottomleft", scaleBarOptions(imperial = FALSE))
})
######################################
# render info box for indicator select
output$infobox <- renderUI({
# get population group
select_popgroup <- as.character(input$popgroup)
# remove special characters from the IDP categories
popgroup        <- case_when(select_popgroup == "PDI" ~ "PDI",
select_popgroup == "Communauté hôte" ~ "Communauté hôte",
TRUE ~ "")
# obtenir secteur et indicateur
select_sector_input <- input$sector
select_indicator    <- input$indicator
indicator_info <- indicator_lookup%>%
filter(groupe_de_population == popgroup & indicateur == select_indicator & question_de_recherche == select_sector_input)
select_color <- case_when(input$color == "reach_red" ~ reach_red,
input$color == "reach_green" ~ reach_drk_green,
input$color == "reach_grey" ~ reach_grey)
HTML(sprintf("<img class='icon' src='%s.svg' style='color: %s; display:inline-block'>
<h2 style='color: %s; display:inline-block'><strong>    %s</strong></h2>
<h3 style='color: %s'><strong> %s</strong></h3>
<hr>
<h4>%s</h4>
<p><strong>%s</strong></p>",
indicator_info$icon,
select_color,
select_color,
select_sector_input,
reach_grey,
popgroup,
indicator_info$indicateur,
indicator_info$sous_ensemble_de_donnee))
})
# observez les changes des selections
observe({
select_popgroup <- as.character(input$popgroup)
select_sector <- as.character(input$sector)
# filter indicator for selected pop group
selected_ind_group <- indicator_lookup%>%
filter(case_when(select_popgroup == "PDI" ~ groupe_de_population == "PDI",
select_popgroup == "Communauté hôte" ~ groupe_de_population == "Communauté hôte"))
# filter indicator for selected sector
selected_ind_group <- selected_ind_group %>%
filter(question_de_recherche == select_sector)
updateSelectInput(session, "indicator",
choices = unique(as.character(selected_ind_group$indicateur)))
})
# event pour imprimer l'ecran
observeEvent(input$print, {
screenshot(id= "map")
})
output$downloadData <- downloadHandler(
filename = function() {
paste("data-", select_popgroup, ".csv", sep="")
},
content = function(file) {
write.csv(admin2_data, file)
}
)
}
#############################################################################################################################
### LANCEZ LA APP ###
# runApp(shinyApp(ui, server),launch.browser = TRUE)
shinyApp(ui, server)
###### pour faire un deploy a shinyapps.io installer le package "rsconnect"
###### et passez cette fonction dans le console------ rsconnect::deployApp()
#################################################################################################################################################
